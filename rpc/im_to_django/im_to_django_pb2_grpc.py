# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import im_to_django_pb2 as im__to__django__pb2


class nameStub(object):
    """??service??????
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.tokrn_interface = channel.unary_unary(
                '/name/tokrn_interface',
                request_serializer=im__to__django__pb2.rsp_data.SerializeToString,
                response_deserializer=im__to__django__pb2.req_data.FromString,
                )


class nameServicer(object):
    """??service??????
    """

    def tokrn_interface(self, request, context):
        """??rpc????????
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_nameServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'tokrn_interface': grpc.unary_unary_rpc_method_handler(
                    servicer.tokrn_interface,
                    request_deserializer=im__to__django__pb2.rsp_data.FromString,
                    response_serializer=im__to__django__pb2.req_data.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'name', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class name(object):
    """??service??????
    """

    @staticmethod
    def tokrn_interface(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/name/tokrn_interface',
            im__to__django__pb2.rsp_data.SerializeToString,
            im__to__django__pb2.req_data.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
